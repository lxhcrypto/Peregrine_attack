use num_complex::Complex;
use rand::distributions::{Distribution, Uniform};
use rand_distr::Binomial;
use rayon::prelude::*;
use std::f64::consts::{E, PI};

pub fn key_sig_gen(logn: usize, nbsig: usize) -> (Vec<Vec<i64>>, Vec<Vec<i64>>) {
    let n: usize = (2 as u32).pow(logn as u32) as usize;
    let mut f: Vec<i64> = vec![0; n];
    let mut g: Vec<i64> = vec![0; n];
    let mut ff: Vec<i64> = vec![0; n];
    let mut gg: Vec<i64> = vec![0; n];
    // Test keys
    match logn {
        9 => {
            f = vec![1, -1, 1, 2, 1, 1, 0, 3, 2, 6, 2, -1, -7, 6, 1, -1, -1, -3, -3, -1, 1, 3, -3, 2, -1, -3, 4, 1, -4, -8, -5, 3, 1, 3, -5, 0, 0, 6, 0, -5, 0, -2, -1, 6, 12, 1, 1, -8, -1, 3, -2, 0, 1, 2, -5, -1, 0, -4, 3, 2, 0, 2, 3, 2, 4, 2, -1, 2, -6, 4, 0, -9, -3, 0, -2, -6, -4, -4, -3, -3, -6, 2, 0, -3, -1, -1, -4, -1, -1, 2, -2, 5, 2, 2, 1, 3, -5, -1, 0, 1, -4, -4, 8, 2, 2, -4, -1, 1, -3, 6, 2, -6, 3, -7, -6, 2, 5, -10, 2, 8, 6, -3, -4, 1, 2, -5, -1, 0, -9, 1, 5, 0, -1, 0, 4, -2, -1, 4, -9, -2, 2, -2, 4, -4, 0, 2, 5, 3, -4, -5, 4, -3, -7, 6, 8, 7, 2, -2, 1, 7, 3, -3, -5, 4, 5, 2, -2, -8, 3, -4, 0, -4, 2, -2, 8, 2, 2, -2, -1, -6, -4, -2, -4, 4, -2, -1, -2, 0, -1, 2, 2, -4, -3, -1, -6, -5, 0, 3, -1, -7, 1, 1, -5, 2, -2, 8, 0, 4, -6, -4, -1, 3, 4, -2, -1, -1, -3, -1, 0, 2, -1, -2, 0, -1, 1, 4, -10, -6, 10, -3, -1, 0, 6, 5, 0, 0, 1, 1, -3, -5, -1, -2, 3, 0, -3, -4, -6, -10, 1, 6, 3, -8, 3, -9, -5, 1, 6, -1, 2, -4, -2, -1, -6, 4, -3, -1, 0, 6, 2, 2, 6, 0, 2, 4, 6, 1, 0, 2, -5, 5, -4, 3, 2, -7, 3, 0, -5, 7, -1, 0, 3, 7, -4, -1, 6, 3, -3, 1, 3, 3, -3, 1, 1, -2, 2, 15, -1, 1, 0, -4, 1, 3, 3, -2, -3, 2, 3, 1, -2, -2, 7, 8, 6, 5, 1, 3, -1, -6, 5, 1, 2, 3, 5, 3, -1, 3, 2, 0, -4, -8, -1, -3, 7, 3, 3, -1, 0, -2, 5, 0, 1, -1, -3, -3, 5, 0, -3, 3, 3, -1, -2, 6, -1, 6, 2, 1, -1, 1, -4, 7, 0, -4, -4, -3, 1, 8, 2, 6, -9, 8, 3, 4, -4, 5, 2, -1, 1, 5, -3, -9, 4, 5, 0, 7, 6, -3, -1, -9, -1, 4, 4, 4, -3, -1, -1, -1, -2, 2, 7, -2, 4, -7, 2, 1, 6, 6, 2, 2, -1, 2, -1, 5, 3, -2, -10, -6, 4, 9, 3, 2, 2, 2, -7, 4, 0, 3, -6, -3, 5, -2, -5, 10, -2, 1, 0, -2, -7, -8, 0, 3, 9, -4, -2, 2, -10, -1, 3, -3, -2, 3, -4, 2, -2, 1, 1, -1, -4, -4, 0, 1, 2, 8, 1, -3, 1, -2, -5, -5, 10, 3, 7, 6, -8, 7, -3, 4, -8, 4, 4, 0, -7, 0, -8, -8, 3, 7, 3, -1, 3, 7, -6, 3, 0, -3, 4, -9, 0, 2, -1, 6, 2, 3];

            g = vec![1, 9, -2, 10, -2, 3, -9, -1, -2, 5, -7, 5, 3, -5, 6, 4, 10, -4, -3, -4, -3, 0, 3, -4, 0, -3, 6, -3, 6, -3, -3, 0, 1, 0, -4, -2, 1, -4, 2, 5, 0, 1, -1, -2, -1, 4, -1, 6, 0, -2, 3, -4, -1, -2, -5, 6, -2, -3, 2, -8, 3, 0, 3, -3, 1, 7, -7, 6, 1, -5, -4, -4, 3, 3, 3, 0, -3, -6, 0, 2, -2, -2, -1, 6, -5, 4, 4, 6, 0, 4, -5, -3, -3, 2, -7, 0, 2, 3, -2, 8, -5, -5, 0, 0, 1, -7, 2, -2, -5, -1, 3, 1, 1, 4, -1, 1, 3, 4, -1, -6, 0, 3, 4, -5, 2, 3, 1, 1, -3, -4, 1, -5, 4, 5, 1, 5, -2, -3, 1, -3, -3, 13, -3, -1, -4, -1, 1, 1, -4, -1, -3, -2, 1, 1, -2, 6, -4, 0, 2, -1, 6, 7, -1, 2, 1, 1, 5, 1, 0, 4, -2, 2, 0, 0, 6, 2, 0, -4, 1, -4, 0, -3, -3, -5, 4, 4, 1, 0, 2, 7, -8, -8, -1, -1, 2, 5, 3, -9, -7, -4, 2, 0, 4, 3, -6, 2, -8, -4, -4, -3, -3, 3, -2, -2, 3, -1, 3, -3, 3, 1, 4, 0, 2, 0, 13, -5, 1, -1, -4, 1, 9, -4, 2, -2, 0, 1, -10, 0, 2, 6, 8, -3, -1, -1, 0, 3, -1, 0, -2, 3, 0, 7, -1, 2, 3, 1, -2, -5, 2, 4, 4, -7, 2, -3, 5, 2, -1, 0, -1, 5, -2, -3, 1, -1, -9, -5, 5, 5, 5, -6, -7, 3, 3, -1, -3, 5, -5, -7, 4, 4, -2, -2, -8, 3, 4, 2, -5, 3, 3, 2, 2, 9, -2, 2, 2, -5, 4, 6, 3, 0, -1, 1, -2, 0, 7, -5, -3, -2, -4, 2, 3, 2, 2, -3, 5, -1, -1, -5, -5, -5, -2, -7, 3, 4, -9, 3, 0, 0, 1, -4, -1, 3, 6, 3, -2, 1, 3, 5, 0, -6, 1, -1, -3, 1, -2, 4, 7, 1, -2, 5, 4, -1, 2, 3, 5, 0, -7, 0, -4, -1, 1, -4, 2, -4, 0, 2, -7, -1, 3, -1, -6, -1, -15, -1, 3, 10, 2, 3, 4, 1, 3, 3, -1, -1, -2, 9, 0, -5, 4, -4, -1, -5, 4, 7, 10, -2, 5, 4, 1, 4, -3, 3, 1, 2, -4, -2, 2, -9, 4, -3, 1, -3, -1, -1, -2, 4, 0, -3, -2, -1, 3, 2, -3, 0, 3, -2, 3, 4, 5, 2, -2, -2, -4, -3, -2, -5, -4, -7, 0, 1, 3, -2, 2, -3, -3, 7, -3, -3, 1, 1, 2, 7, -2, -4, 4, 2, 1, 1, 0, 0, 3, 3, 3, -2, 4, -3, -4, 11, -2, -6, 1, 2, -1, 3, 3, -3, 7, -2, 9, -3, -2, -3, 3, 4, 2, 1, -2, 0, -8, 0, 1, -2, -1, -1, -1, 4, 3, -2, -7, 2, 4, 1];

            ff = vec![-10, -1, 4, 5, -17, 23, 17, -10, -29, 24, 13, -10, -6, 3, 28, -10, -18, 15, -19, 29, 64, -15, -41, 45, 5, 9, 55, -7, 37, -69, 35, 12, 17, 37, -29, 56, -35, -15, 45, 3, 53, 41, -16, -24, 8, 1, -3, -35, 11, 47, 42, 16, -34, -6, 7, 27, 7, -11, -4, -18, -21, 43, 23, -35, 7, -4, 7, -33, 41, -38, -6, -20, -18, -17, -12, -3, 28, -22, -12, 4, 26, -44, 22, 11, 19, 1, 7, -11, 16, 32, -7, 13, 20, -47, -26, -19, 1, 11, 42, -10, -13, 1, -29, -24, 10, -13, 23, 61, 29, -9, -19, -30, 23, 44, -16, 21, -26, -10, 11, 43, -7, -23, -13, -7, 53, 26, -7, -5, 13, -29, -55, -13, -8, -3, 2, 1, 39, 27, -29, 44, -22, -20, 13, -36, 54, -22, -7, -14, -21, 11, 27, 0, 15, 30, 21, -1, 4, -12, -39, -38, 52, 15, -13, 9, 16, -1, -39, -42, -45, 21, 41, 44, -33, -8, -3, -23, 7, 0, -53, -21, 24, -11, -11, -43, 0, -3, -39, 19, -2, 7, -42, 13, -29, 30, 16, 43, -25, -7, 35, -13, 44, 34, 0, -46, -27, 42, -10, 11, 7, 21, 22, 14, 31, -20, -29, 48, 12, 9, -18, 13, 2, -6, -22, -24, -20, 10, 50, 18, -38, 5, -46, 16, -37, -28, -24, 16, -2, -6, -38, -18, 13, -44, -16, -9, -22, 35, -10, 16, -7, 3, 26, -74, -12, -11, 5, -15, 29, 25, -5, -29, -22, -22, 18, 26, -3, 23, 13, 10, -22, 12, 13, -20, -29, -5, 21, -20, -25, 7, -13, -33, 31, -1, -9, 4, -3, -4, -10, 21, -25, 24, -10, -17, -7, -17, -7, -4, -30, 0, 46, 27, -38, -9, -38, 15, 6, 2, -65, 24, 48, -25, -10, 27, 5, 1, -13, 17, -11, -60, 39, 28, -7, -14, 2, -7, 4, 41, -4, -43, -10, 54, 15, -24, -14, -34, -16, 2, 22, -43, -14, 14, 1, -23, -21, 26, -12, -47, 6, 26, 7, -21, 51, 21, -37, -42, 30, 12, -20, -31, -18, 39, 16, 48, -16, -31, -24, -7, 1, 45, -49, 1, 23, 9, 28, 22, 10, -19, 19, 33, -19, 12, 34, -13, 10, 39, -37, 38, 22, 0, -30, -21, 8, -5, -17, -11, 36, 38, 12, -17, -31, -7, -2, -22, -4, 22, -13, -18, 11, -15, -1, -11, -5, -8, -8, 44, -12, -47, 13, 41, -12, -18, 4, -10, -28, -2, -9, 7, -4, -17, -7, 3, -8, -11, 32, 3, -23, 6, -35, -18, 28, -2, -43, -16, -55, -2, 8, 42, 8, -11, 16, 3, -45, -10, 32, -85, -7, 23, 10, -1, 2, -17, 25, -8, 1, -6, -27, -17, 52, 10, 8, -7, 9, -34, -27, 8, 62, 70, 11, 10, 31, -20, -2, -36, -25, -3, 58, 43, 13, 17, 18, 5, 24, 26, 29, -18, -9, 9, 9, -26, 41, 0, 11, 33, -25, 19, -19, -45, -7, -39, 19, -24, -14, 2];

            gg = vec![-17, 3, -32, 21, 9, -14, -4, 25, 9, -34, 7, 32, 27, -7, -21, 10, 15, 5, 12, -24, 54, 43, 30, -23, 22, -18, 1, -16, 5, -9, -11, 9, 3, 4, -11, -12, 10, 0, 0, -1, -14, 15, 11, -8, 12, 13, -19, 13, -41, -9, -2, -13, -8, -7, 17, 11, -48, -35, 17, -1, 45, 20, -47, 25, -6, 35, 15, 7, -17, 1, 15, -48, 19, 1, -48, 9, 1, 1, 38, 4, -44, 21, -26, -30, 3, 15, 16, -31, -34, 45, 17, -2, 13, -24, 30, -12, -43, 12, -38, -27, 6, 1, 13, 24, 6, -18, 22, 16, -5, 12, 1, -18, -33, -7, -11, 44, 13, 21, -22, -36, 25, -29, 18, -1, 25, 5, -28, -3, 30, 13, 19, -28, -4, -16, 47, -36, -27, -37, 9, 13, 35, 2, -1, -19, 8, -4, 8, -5, 26, 9, 17, 33, 22, 2, -9, 27, 17, -16, 1, -24, -32, -5, -34, 15, -14, -37, 32, -23, 19, -13, -29, 11, 45, -14, 11, -18, -24, -41, -36, 8, 15, -9, -19, -13, 29, -26, -19, -28, -8, -26, 20, 18, 22, 18, -10, -26, 6, 56, -2, 16, -10, -56, -20, 44, -11, 34, -20, 9, 4, 2, -1, 1, -23, 4, -28, 6, 32, -10, 7, -15, 39, 17, 50, -35, -53, -30, 31, 59, 19, 0, -36, -14, 24, -8, -27, -12, -8, 14, -9, 11, 3, 31, -44, -22, -6, 40, 25, 6, -64, -16, 31, -28, 3, 9, -35, 6, 20, -25, 33, 4, -35, -1, -47, -4, 41, -14, -6, -2, 34, 36, 15, 18, -59, -39, 34, 43, -31, 14, -13, 14, -18, 5, -21, -53, -13, 21, 14, -3, 21, 38, -23, -3, -18, 22, -18, 36, -12, -29, -7, -16, 3, -6, 31, 4, -1, -4, 11, -33, -55, 33, -10, 18, -3, -4, 9, -1, -10, 3, -37, 20, 11, -7, -3, 33, 6, 22, 19, 16, 8, -7, 47, -46, 29, -33, 27, -38, -18, 24, 35, 18, 27, -5, -21, 15, -47, -9, 16, -50, 11, -6, 59, 41, -12, 21, -24, -35, -18, -16, 0, -18, 32, -3, -39, 4, 13, -26, 32, 11, 4, 6, -38, -19, 23, 13, 27, 6, 0, -3, -59, -30, 25, 1, 45, -40, 28, 17, -34, -6, -17, 12, -22, 24, -21, -17, 39, 7, -10, -23, 3, -18, 33, -7, 17, -2, -10, 20, -19, -37, 24, 54, -41, -55, 46, 0, -2, 14, 13, -35, -25, -33, 22, 0, 15, -27, -23, 27, 18, -26, 0, -60, 7, 19, -15, 0, -31, -26, -15, 1, 38, -23, -12, 26, -34, 24, 25, 3, -20, 4, 27, -26, 32, 33, -17, 19, 38, 37, 64, 34, -29, -28, 2, 42, -17, -39, 23, 38, 11, 10, -6, 3, 38, -26, -34, 2, -7, -2, 3, -2, 30, -3, 2, -20, -25, 18, -27, 4, 66, -3, -52, 51, -10, -7, -46, -43, -6, 2, 12, 19, -26, 19, -7, -22, 17, 9, -38, 22, 27, -15, 11, -11, 18, 4];

        }
        
        _ => {}
    }
    let f_fft = fft(&neg(&f.iter().map(|&x| x as f64).collect()));
    let g_fft = fft(&g.iter().map(|&x| x as f64).collect());
    let ff_fft = fft(&neg(&ff.iter().map(|&x| x as f64).collect()));
    let gg_fft = fft(&gg.iter().map(|&x| x as f64).collect());

    let mut sigs: Vec<Vec<i64>> = vec![vec![0; n * 2]; nbsig];
    // uniform sampler 
    let unif = Uniform::from(-0.5..0.5);
    // binomial sampler
    let binom = Binomial::new(26, 0.5).unwrap();
    // generate signatures
    sigs.par_iter_mut().for_each(|x| {
        let mut rng = rand::thread_rng();
        let mut coeff1: Vec<f64> = vec![0.0; n];
        let mut coeff2: Vec<f64> = vec![0.0; n];
        for j in 0..n {
            coeff1[j] = unif.sample(&mut rng) as f64 + (binom.sample(&mut rng) as f64 - 13 as f64);
            coeff2[j] = unif.sample(&mut rng) as f64 + (binom.sample(&mut rng) as f64 - 13 as f64);
        }
        let coeff1_fft = fft(&coeff1);
        let coeff2_fft = fft(&coeff2);
        let mut sig1_fft: Vec<Complex<f64>> = vec![Complex::new(0.0, 0.0); n];
        let mut sig2_fft: Vec<Complex<f64>> = vec![Complex::new(0.0, 0.0); n];

        for j in 0..n {
            sig1_fft[j] = coeff1_fft[j] * g_fft[j] + coeff2_fft[j] * gg_fft[j];
            sig2_fft[j] = coeff1_fft[j] * f_fft[j] + coeff2_fft[j] * ff_fft[j];
        }

        let mut sig: Vec<i64> = ifft(&sig1_fft).iter().map(|&x| x.round() as i64).collect();
        let sig2: Vec<i64> = ifft(&sig2_fft).iter().map(|&x| x.round() as i64).collect();
        sig.extend(&sig2);
        for i in 0..n * 2 {
            x[i] = sig[i].clone();
        }
    });
    let mut key: Vec<Vec<i64>> = vec![vec![0; n]; 4];
    key[0] = f;
    key[1] = g;
    key[2] = ff;
    key[3] = gg;
    (key, sigs)
}


// FFT

fn fft(a: &Vec<f64>) -> Vec<Complex<f64>> {
    let n = a.len();

    let mut a_fft: Vec<Complex<f64>> = vec![Complex::new(0.0, 0.0); n];
    let w0: Complex<f64> = Complex::new(E, 0.0).powc(Complex::new(0.0, PI / (n as f64)));
    fft_step(&mut a_fft, &a, n, n, w0);
    a_fft
}

fn fft_step(f_fft: &mut Vec<Complex<f64>>, f: &Vec<f64>, n: usize, n0: usize, w0: Complex<f64>) {
    if n == 1 {
        f_fft[0] = Complex::new(f[0], 0.0);
    } else {
        if n == 2 {
            f_fft[0] = Complex::new(f[0], f[1]);
            f_fft[1] = Complex::new(f[0], -f[1]);
        } else {
            assert!(n % 2 == 0);
            let mut f0: Vec<f64> = vec![0.0; n0 / 2];
            let mut f1: Vec<f64> = vec![0.0; n0 / 2];
            let mut f0_fft: Vec<Complex<f64>> = vec![Complex::new(0.0, 0.0); n0 / 2];
            let mut f1_fft: Vec<Complex<f64>> = vec![Complex::new(0.0, 0.0); n0 / 2];
            let w02: Complex<f64> = w0 * w0;
            let mut wk: Complex<f64> = w0;
            for i in 0..(n / 2) {
                f0[i] = f[2 * i];
                f1[i] = f[2 * i + 1];
            }
            fft_step(&mut f0_fft, &f0, n / 2, n0, w02);
            fft_step(&mut f1_fft, &f1, n / 2, n0, w02);
            for i in 0..n {
                f_fft[i] = f0_fft[i % (n / 2)] + wk * f1_fft[i % (n / 2)];
                wk *= w02;
            }
        }
    }
}

pub fn adj(f: &Vec<f64>) -> Vec<f64> {
    let c = ifft(&adj_fft(&fft(&f)));
    c
}

fn adj_fft(f_fft: &Vec<Complex<f64>>) -> Vec<Complex<f64>> {
    let n = f_fft.len();
    let mut adj_f_fft: Vec<Complex<f64>> = vec![Complex::new(0.0, 0.0); n];
    for i in 0..n {
        adj_f_fft[i] = f_fft[i].conj();
    }
    adj_f_fft
}

fn ifft(f_fft: &Vec<Complex<f64>>) -> Vec<f64> {
    let n = f_fft.len();
    let mut fc: Vec<Complex<f64>> = vec![Complex::new(0.0, 0.0); n];
    let mut f: Vec<f64> = vec![0.0; n];
    let w0: Complex<f64> = Complex::new(E, 0.0).powc(Complex::new(0.0, -PI / (n as f64)));

    ifft_step(&mut fc, &f_fft, n, n, w0);

    for i in 0..n {
        f[i] = fc[i].re;
    }
    f
}

fn ifft_step(
    f: &mut Vec<Complex<f64>>,
    f_fft: &Vec<Complex<f64>>,
    n: usize,
    n0: usize,
    w0: Complex<f64>,
) {
    if n != 2 {
        assert!(n % 2 == 0);
        let mut f0: Vec<Complex<f64>> = vec![Complex::new(0.0, 0.0); n0 / 2];
        let mut f1: Vec<Complex<f64>> = vec![Complex::new(0.0, 0.0); n0 / 2];
        let mut f0_fft: Vec<Complex<f64>> = vec![Complex::new(0.0, 0.0); n0 / 2];
        let mut f1_fft: Vec<Complex<f64>> = vec![Complex::new(0.0, 0.0); n0 / 2];
        let w02: Complex<f64> = w0 * w0;
        let mut wk: Complex<f64> = w0;
        for i in 0..n / 2 {
            f0_fft[i] = (f_fft[i] + f_fft[i + (n / 2)]) * Complex::new(0.5, 0.0);
            f1_fft[i] = wk * (f_fft[i] - f_fft[i + (n / 2)]) * Complex::new(0.5, 0.0);
            wk *= w02;
        }
        ifft_step(&mut f0, &f0_fft, n / 2, n0, w02);
        ifft_step(&mut f1, &f1_fft, n / 2, n0, w02);

        for i in 0..(n / 2) {
            f[2 * i] = f0[i];
            f[2 * i + 1] = f1[i];
        }
    } else {
        f[0] = (f_fft[0] + f_fft[1]) * Complex::new(0.5, 0.0);
        f[1] = (f_fft[0] - f_fft[1]) * Complex::new(0.0, -0.5);
    }
}

fn neg(a: &Vec<f64>) -> Vec<f64> {
    let mut c = vec![0.0; a.len()];
    c.par_iter_mut().enumerate().for_each(|(i, x)| *x = -a[i]);
    c
}