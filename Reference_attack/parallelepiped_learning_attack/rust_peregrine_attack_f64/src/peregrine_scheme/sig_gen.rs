use num_complex::Complex;
use rand::distributions::{Distribution, Uniform};
use rand_distr::Binomial;
use rayon::prelude::*;
use std::f64::consts::{E, PI};

pub fn key_sig_gen(logn: usize, nbsig: usize) -> (Vec<Vec<i64>>, Vec<Vec<i64>>) {
    let n: usize = (2 as u32).pow(logn as u32) as usize;
    let mut f: Vec<i64> = vec![0; n];
    let mut g: Vec<i64> = vec![0; n];
    let mut ff: Vec<i64> = vec![0; n];
    let mut gg: Vec<i64> = vec![0; n];
    // Test keys
    match logn {
        9 => {
            f = vec![
                -1, 1, 2, 6, -2, 3, 0, 2, 4, 2, 5, 6, -6, 9, 0, -3, 6, 2, 5, -2, 2, -4, -2, 5, 5, 0, -6, 4, 4, 3, 5, 1, -7, 4, 6, -3, -4, 2, -2, 1, 0, 2, 2, -5, -6, 0, 6, 1, 0, 3, -13, 8, 4, 1, 2, 7, -5, 7, 1, 1, 4, 2, 2, -2, 5, -7, 3, 3, 0, -10, 3, 3, 4, 6, 4, -1, -1, 1, -6, 3, -5, 0, -3, 4, 6, -1, 0, -6, -4, -3, -7, 5, -2, 0, -2, -2, 2, 3, 3, -1, 1, 6, 2, 1, -6, -5, -4, 1, 0, 2, -3, -7, -1, 2, -6, -2, -2, 4, 6, 5, -2, -8, 6, -3, 2, 3, 4, 0, 2, -5, -3, 6, 3, -5, -1, -2, 1, 3, -5, 2, 2, 1, 1, 1, -3, -4, 8, 6, -9, 4, -3, -11, -5, -2, 8, 2, -2, -4, -2, -3, 5, 3, 3, -2, 3, -2, -7, 6, 5, -2, 11, 3, 0, -1, -1, 9, 6, -2, -9, -5, 0, -1, 5, -2, -12, 2, -3, -1, 1, 1, 1, -2, -5, -6, 4, -8, -2, -4, 0, 1, 1, 7, 2, 3, 2, -2, 2, -2, 2, -3, 2, -2, -2, 4, 8, -5, -2, 8, 2, -3, 6, -1, 6, 6, -2, 8, 7, -1, -2, -5, 3, -5, 0, 7, 0, -2, -5, 3, 0, -4, -2, -2, -5, 2, 1, -7, 2, 3, 0, -2, 5, -1, 1, 2, 3, -7, 0, 0, -2, -3, -8, -7, -5, -5, -2, 7, -3, -7, 1, -7, 1, 3, 0, 1, -4, -2, 0, 9, -4, 1, -2, -2, -3, 4, 6, -1, 4, 5, 3, -3, -1, 1, -4, -4, -3, 1, -7, 0, -6, -9, -5, 3, -2, 4, 6, 0, 6, -2, 3, 0, 1, 7, 3, -3, 1, -2, -5, 1, -2, -7, -1, 1, -4, -2, -2, 1, -2, 2, -7, -3, -1, 1, -4, -1, 2, 3, 0, -6, 0, 1, -3, -4, 1, -6, 2, -2, -7, 3, -6, 4, -4, 7, 0, -5, 11, 4, 0, 1, 2, 0, 1, 2, 3, 5, -2, 5, 3, -4, -6, -1, 1, 9, 0, -4, 6, -3, -1, 0, 4, -2, -7, -1, -2, 2, 5, 2, 2, 6, 0, 0, 4, 1, -3, -6, 1, -2, 2, 3, -2, -5, -3, -3, 0, -4, 0, 10, -1, 6, 4, -5, 2, 0, -4, -1, 6, -4, 1, 2, -6, -1, 1, -4, 4, -1, 3, 1, 1, 0, 2, -1, -3, -4, 0, 4, -5, -2, 4, -4, 8, 0, 2, 3, -5, 1, -4, 0, -6, 4, 0, -2, 3, 0, -1, -2, -2, -6, 8, -6, 2, 1, -7, 3, 3, -2, -4, -4, 2, 3, -8, -3, 1, -1, 3, 1, -12, -1, -8, 0, 2, 0, -1, 0, 2, 4, 4, 1, -1, -10, 4, 1, 1, -2, 5, 2, 2, 0, -2, 1, -2, 2, -4, -4, -1, 0, 2, 1, -5, -8, -8, 0, 1, 2
                ];
            g = vec![
                5, 3, 7, -5, -5, -3, 0, -5, 3, -2, 3, 0, -5, 1, 8, 2, 6, -4, 0, 2, -4, 3, -8, 4, 5, 3, -6, 1, -4, 4, 0, 1, 0, 0, -5, -3, -5, 2, 8, 4, 3, 2, 1, 1, 6, 0, 4, 4, 1, 1, -1, 3, -1, -3, 4, 2, 5, 4, -2, 3, 4, 3, -1, -1, -3, 0, 2, 0, 4, 8, 4, 3, 0, 6, 10, -1, 9, 0, -2, 0, -8, -1, -4, 3, 3, -1, 4, 10, -3, -3, 0, 5, 5, 3, -7, -4, -2, 6, 1, 0, 7, -4, 0, 5, -1, 2, 1, 3, 2, -3, -4, -2, -1, -1, 5, 3, -1, -8, 1, -1, 7, -4, -4, -2, -5, -7, 3, 1, -3, -1, 7, -9, 1, 3, -3, 1, -9, -2, 7, 1, 2, 0, -3, -4, 4, -2, -8, 2, 4, 0, -2, 1, 0, 0, 4, -5, 1, 4, 2, 4, 0, 10, -1, 2, 4, -6, 2, 3, -10, -3, -7, 4, -1, 1, 1, 8, 8, 4, -1, -3, -9, -6, 4, 2, -6, 1, 5, 4, -1, 1, 4, -3, 7, -2, 2, -11, 2, -3, -2, 2, 8, 2, -4, -8, 3, 0, 1, 3, 3, 1, -6, -6, 5, -2, -8, 5, 3, 2, -1, -2, 5, -2, -2, 0, 2, 2, -3, 1, -8, -1, -2, 1, -5, -1, 3, 0, -3, -5, 1, -2, -2, -3, 3, 2, 4, -2, 7, -3, -10, 4, 1, 6, 2, 0, 8, -2, 5, -2, -2, 3, -3, 3, -2, -2, 5, -1, -5, -9, -3, 0, 3, -1, -2, -1, -2, -4, 1, 3, -7, 8, 6, -5, 5, 1, 2, 5, 0, -3, 1, -1, -4, 3, 4, 0, 4, 3, 5, 1, 2, 1, -6, 1, 4, 2, -5, -2, -1, -3, -5, 0, -3, 3, 2, -3, 2, 1, -2, 4, -1, 2, -2, 0, 7, 2, 0, 5, 4, -1, -1, 0, -3, -4, 2, 6, 2, -2, -2, -4, -5, 6, -1, 2, 8, -1, 3, -7, -3, 7, -8, 2, -2, 5, -3, -4, 3, 6, 2, -2, 4, 5, -1, 0, -4, 3, 1, -8, 4, -6, -3, -3, -4, -4, -4, 4, -1, 4, -5, 6, 1, 0, 2, 3, 4, -3, -1, -4, -2, 10, -4, -1, 5, 6, 5, 1, -2, -3, 3, -2, -1, -1, 0, 0, -1, 8, -2, -1, -8, 2, 3, -1, 3, -4, 6, 6, 8, 4, -3, -1, 4, 1, -4, 9, -2, 1, 0, -4, -10, 1, 6, 3, 0, -4, 1, 2, -5, 2, -7, 1, -4, -2, 5, 4, -1, 3, -5, 3, 0, 1, -1, 2, -1, -2, -4, 3, 5, -4, 9, 2, -1, 0, 3, -4, 0, -8, 3, -2, 5, 4, -6, -5, -2, 0, -3, -6, -5, 1, -9, -2, -2, -1, -2, -1, 4, 2, 1, -2, -1, 2, -1, 1, 12, -6, -4, 0, -1, -5, -1, -4, -1, -7, 3, -1, -5, 4, -1, -3, 2, -7, 5, 1, 5, -6
                ];
            ff = vec![
                -11, -8, 23, -25, 40, 18, -32, 38, 28, -48, -3, 8, -31, 5, 49, -35, -2, -2, -31, -15, -7, 7, -3, 20, -20, 3, 14, 6, -8, 35, -46, -22, -13, -36, 9, -23, -63, -17, 10, 15, -22, 11, -36, -12, 40, -42, -23, 18, 27, -39, 87, 15, -21, 52, 52, -15, -20, 54, 22, 38, -18, -13, 20, -12, -52, 6, -13, -17, 45, 8, -25, -26, 43, 46, -18, 30, -13, 26, 50, -9, -32, 30, -44, 50, 11, -21, -38, 5, -2, -36, -18, 0, -48, 34, 18, -54, 1, -17, -23, -10, 47, -21, 37, 21, -1, 80, 3, -10, 34, -9, -53, 46, 20, -19, 9, -21, -17, 11, 30, 6, -7, 38, 40, 3, 29, -5, -6, -42, -16, 17, -2, 0, 42, 74, -21, 14, 44, 3, 8, 6, -49, 4, -25, -32, 1, -27, -11, -83, 51, 1, -29, 5, 30, 0, 17, 22, 69, 48, 14, 5, -19, -9, 31, 16, -62, -7, -14, -52, -26, 37, 23, -37, 14, -25, -15, -8, 17, -9, 13, -31, 47, 18, 3, -25, 3, 1, -7, 34, 27, 58, -26, 20, -3, -21, 22, 13, -12, -31, -37, -14, 11, 40, 37, -28, -26, -29, -11, 46, -44, 41, -30, -18, -4, -40, -26, -24, -6, -47, -36, -10, 34, -10, -11, -5, -20, 21, -23, 7, -8, -1, 5, 3, 11, 24, 23, -39, -11, 10, -28, 41, 34, -12, 12, -19, -36, 25, -28, -4, -35, -40, -49, -18, 38, 33, 2, 20, -6, -14, -14, -27, 14, 3, 11, 15, -28, 6, 3, 30, -19, 24, 15, 40, 41, 3, 58, -26, -29, 35, 30, -4, -37, -27, -15, -4, -56, 28, 6, -11, -8, 39, 13, -12, -19, 40, -35, -9, 53, -22, -11, 8, -11, -29, 24, -1, -6, 25, -17, -5, 13, -4, -7, -13, -48, 11, -43, 21, 12, 82, 35, 3, 13, -28, 2, 92, -9, -4, 7, -61, 5, 20, 21, -27, 5, 18, -39, 5, -18, 51, -4, 6, 1, 39, 12, 10, 10, -21, -1, 18, 12, 10, -24, 32, 13, -8, 3, -23, 5, -16, -18, -12, -9, -10, -30, 28, -2, 0, 5, -49, -16, 11, 3, 26, -25, -3, -12, -31, 10, -10, -33, 18, -15, -6, 33, 1, 12, -4, 12, 9, -37, -20, -28, -16, -31, 25, 18, -45, 22, 32, -27, -21, 36, -17, 13, 15, 9, -15, 32, -3, 20, -9, -20, 18, 35, 26, 16, -4, -28, 34, 1, 4, 51, -21, -39, -12, -39, 3, 29, 8, -50, -75, -22, -43, -46, -4, -22, -15, 13, -3, 31, 51, 28, -4, 14, -61, -25, -2, 6, 16, -22, 9, -41, 3, 8, 2, 16, -31, -11, 43, 6, 0, 62, -9, -14, 45, 22, 0, 13, 27, 34, -11, 50, 28, -34, 8, 20, -13, -49, -20, 12, -18, -34, 19, 5, -39, 23, 38, -16, -8, 17, -49, 26, 27, 11, -1, -7, -43, -41, 36, 2, 1, 28, 34, 18, 38, 4, -7, 8, -68, -14, 55, -2, -26
                ];
            gg = vec![
                -36, 9, -8, -17, -26, 17, 39, -25, -45, 0, -28, 31, 29, 70, -24, 22, 13, -56, -32, 22, -1, 15, 11, -26, 7, 14, -12, 9, 21, 4, -34, 28, -43, -38, 11, 0, -8, -40, 0, -4, -10, 27, 37, 26, 1, 5, 26, -21, -53, -22, 65, -12, -20, 12, -22, 17, -41, 10, 17, -6, -6, -18, 11, -32, -5, 9, -24, -5, 5, 2, 50, -28, -1, 5, 16, 20, 7, -34, -55, 33, 17, 22, 10, -14, 12, -15, -3, 11, -6, 53, 39, 12, 15, -7, 24, 45, -20, -53, -1, -18, 10, -26, -5, 2, 13, 27, -6, 25, 72, 23, 23, 8, -25, -13, -8, -56, 5, 25, -16, 42, 59, 2, 23, -30, -27, -21, -20, -5, 19, -17, 1, -3, 32, 9, -57, 16, 19, 15, -12, 15, 11, -31, -43, 12, 10, -27, 44, -9, 8, 0, -1, 20, -11, -6, 12, -17, -15, 0, -36, -3, 2, -42, 45, 28, 3, 19, -44, -12, -14, 14, 50, -27, 29, -12, 33, -14, -12, 49, 15, -2, 0, -19, -6, -35, 13, -19, -9, 15, 3, -9, -27, -29, 33, 9, -46, -9, 0, 13, -11, 12, 1, 37, 45, 13, -1, -9, 40, 43, 13, 26, -22, 35, 21, -12, 46, 7, -50, 3, 0, -56, -41, 10, -29, -52, 42, -23, 43, 16, -11, -8, 2, -7, 8, 14, -4, -58, 5, 42, 48, 58, 5, -23, -15, -16, -16, 28, 31, -34, -5, -31, -35, 2, 14, -1, -26, 7, -5, -9, -1, -22, -7, 14, 2, 41, -1, -22, -2, 51, -53, -24, 42, -21, -9, -25, 3, -38, -18, 23, -12, -11, -29, 43, -15, 18, -58, 27, 8, -63, 11, -24, 44, 57, -59, 16, 23, 7, -2, -27, -10, -56, 21, -9, -24, -33, 32, -24, 14, 40, 10, 41, 17, 5, -35, 7, 40, 21, 1, -14, -27, 29, -31, 19, -23, 3, 27, -11, -34, -36, 1, -21, -25, 38, 26, 4, 39, 31, -8, 9, -7, -9, 26, -13, -28, 3, 9, -10, 24, 9, 18, 2, 3, -19, -2, 33, 26, 7, 16, -22, -60, 35, -41, 33, -35, -10, 13, 48, -89, -10, 16, 25, 29, 9, 9, -1, -11, 3, -7, 17, -10, -8, -21, -86, -8, 6, 9, -10, 9, -4, 5, 22, 17, 7, -16, 12, -18, 14, 3, 5, 64, -10, -6, 27, 15, -5, -31, -22, 0, 28, -12, -12, 8, -24, 25, 28, 26, -32, -11, -17, -75, -37, 0, 18, 32, 5, -15, 53, 28, -16, 34, 37, 6, -22, 25, 4, -15, -44, -35, -11, 2, 53, 28, 10, 35, -7, 34, -13, -28, 61, -26, -11, 15, -27, 55, 3, -12, -17, -18, 0, 15, 20, -27, -62, 33, -19, -19, -32, -10, -24, -20, 31, -4, -4, 28, -13, 23, -1, 29, 11, 23, -26, 9, -6, 19, -8, -54, 0, -11, -10, 31, 9, -2, -8, 29, -11, -55, 27, 31, -24, 13, -14, -41, -34, -15, 4, -20, 11, 0, 11, -13, -14, 6, 12
            ];
        }

        _ => {}
    }
    let f_fft = fft(&neg(&f.iter().map(|&x| x as f64).collect()));
    let g_fft = fft(&g.iter().map(|&x| x as f64).collect());
    let ff_fft = fft(&neg(&ff.iter().map(|&x| x as f64).collect()));
    let gg_fft = fft(&gg.iter().map(|&x| x as f64).collect());

    // sig gen(parall)
    let mut sigs: Vec<Vec<i64>> = vec![vec![0; n * 2]; nbsig];
    // uniform sampler
    let unif = Uniform::from(-0.5..0.5);
    // binomial sampler
    let binom = Binomial::new(6, 0.5).unwrap();
    // generate signatures
    sigs.par_iter_mut().for_each(|x| {
        let mut rng = rand::thread_rng();
        let mut coeff1: Vec<f64> = vec![0.0; n];
        let mut coeff2: Vec<f64> = vec![0.0; n];
        for j in 0..n {
            coeff1[j] = unif.sample(&mut rng) as f64 + (binom.sample(&mut rng) as f64 - 3 as f64);
            coeff2[j] = unif.sample(&mut rng) as f64;
        }
        let coeff1_fft = fft(&coeff1);
        let coeff2_fft = fft(&coeff2);
        let mut sig1_fft: Vec<Complex<f64>> = vec![Complex::new(0.0, 0.0); n];
        let mut sig2_fft: Vec<Complex<f64>> = vec![Complex::new(0.0, 0.0); n];

        for j in 0..n {
            sig1_fft[j] = coeff1_fft[j] * g_fft[j] + coeff2_fft[j] * gg_fft[j];
            sig2_fft[j] = coeff1_fft[j] * f_fft[j] + coeff2_fft[j] * ff_fft[j];
        }

        let mut sig: Vec<i64> = ifft(&sig1_fft).iter().map(|&x| x.round() as i64).collect();
        let sig2: Vec<i64> = ifft(&sig2_fft).iter().map(|&x| x.round() as i64).collect();
        sig.extend(&sig2);
        for i in 0..n * 2 {
            x[i] = sig[i].clone();
        }
    });
    let mut key: Vec<Vec<i64>> = vec![vec![0; n]; 4];
    key[0] = f;
    key[1] = g;
    key[2] = ff;
    key[3] = gg;
    (key, sigs)
}

// FFT

fn fft(a: &Vec<f64>) -> Vec<Complex<f64>> {
    let n = a.len();

    let mut a_fft: Vec<Complex<f64>> = vec![Complex::new(0.0, 0.0); n];
    let w0: Complex<f64> = Complex::new(E, 0.0).powc(Complex::new(0.0, PI / (n as f64)));
    fft_step(&mut a_fft, &a, n, n, w0);
    a_fft
}

fn fft_step(f_fft: &mut Vec<Complex<f64>>, f: &Vec<f64>, n: usize, n0: usize, w0: Complex<f64>) {
    if n == 1 {
        f_fft[0] = Complex::new(f[0], 0.0);
    } else {
        if n == 2 {
            f_fft[0] = Complex::new(f[0], f[1]);
            f_fft[1] = Complex::new(f[0], -f[1]);
        } else {
            assert!(n % 2 == 0);
            let mut f0: Vec<f64> = vec![0.0; n0 / 2];
            let mut f1: Vec<f64> = vec![0.0; n0 / 2];
            let mut f0_fft: Vec<Complex<f64>> = vec![Complex::new(0.0, 0.0); n0 / 2];
            let mut f1_fft: Vec<Complex<f64>> = vec![Complex::new(0.0, 0.0); n0 / 2];
            let w02: Complex<f64> = w0 * w0;
            let mut wk: Complex<f64> = w0;
            for i in 0..(n / 2) {
                f0[i] = f[2 * i];
                f1[i] = f[2 * i + 1];
            }
            fft_step(&mut f0_fft, &f0, n / 2, n0, w02);
            fft_step(&mut f1_fft, &f1, n / 2, n0, w02);
            for i in 0..n {
                f_fft[i] = f0_fft[i % (n / 2)] + wk * f1_fft[i % (n / 2)];
                wk *= w02;
            }
        }
    }
}

pub fn adj(f: &Vec<f64>) -> Vec<f64> {
    let c = ifft(&adj_fft(&fft(&f)));
    c
}

fn adj_fft(f_fft: &Vec<Complex<f64>>) -> Vec<Complex<f64>> {
    let n = f_fft.len();
    let mut adj_f_fft: Vec<Complex<f64>> = vec![Complex::new(0.0, 0.0); n];
    for i in 0..n {
        adj_f_fft[i] = f_fft[i].conj();
    }
    adj_f_fft
}

fn ifft(f_fft: &Vec<Complex<f64>>) -> Vec<f64> {
    let n = f_fft.len();
    let mut fc: Vec<Complex<f64>> = vec![Complex::new(0.0, 0.0); n];
    let mut f: Vec<f64> = vec![0.0; n];
    let w0: Complex<f64> = Complex::new(E, 0.0).powc(Complex::new(0.0, -PI / (n as f64)));

    ifft_step(&mut fc, &f_fft, n, n, w0);

    for i in 0..n {
        f[i] = fc[i].re;
    }
    f
}

fn ifft_step(
    f: &mut Vec<Complex<f64>>,
    f_fft: &Vec<Complex<f64>>,
    n: usize,
    n0: usize,
    w0: Complex<f64>,
) {
    if n != 2 {
        assert!(n % 2 == 0);
        let mut f0: Vec<Complex<f64>> = vec![Complex::new(0.0, 0.0); n0 / 2];
        let mut f1: Vec<Complex<f64>> = vec![Complex::new(0.0, 0.0); n0 / 2];
        let mut f0_fft: Vec<Complex<f64>> = vec![Complex::new(0.0, 0.0); n0 / 2];
        let mut f1_fft: Vec<Complex<f64>> = vec![Complex::new(0.0, 0.0); n0 / 2];
        let w02: Complex<f64> = w0 * w0;
        let mut wk: Complex<f64> = w0;
        for i in 0..n / 2 {
            f0_fft[i] = (f_fft[i] + f_fft[i + (n / 2)]) * Complex::new(0.5, 0.0);
            f1_fft[i] = wk * (f_fft[i] - f_fft[i + (n / 2)]) * Complex::new(0.5, 0.0);
            wk *= w02;
        }
        ifft_step(&mut f0, &f0_fft, n / 2, n0, w02);
        ifft_step(&mut f1, &f1_fft, n / 2, n0, w02);

        for i in 0..(n / 2) {
            f[2 * i] = f0[i];
            f[2 * i + 1] = f1[i];
        }
    } else {
        f[0] = (f_fft[0] + f_fft[1]) * Complex::new(0.5, 0.0);
        f[1] = (f_fft[0] - f_fft[1]) * Complex::new(0.0, -0.5);
    }
}

fn neg(a: &Vec<f64>) -> Vec<f64> {
    let mut c = vec![0.0; a.len()];
    c.par_iter_mut().enumerate().for_each(|(i, x)| *x = -a[i]);
    c
}